openapi: "3.0.2"
info:
  title: API Title
  version: 1.0.1
servers:
  # Added by API Auto Mocking Plugin
  - url: "http://localhost:3000/api/v1"
    description: "ローカル環境"
  - url: "https://server.test/api/v1"
    description: "本番環境"

tags:
  - name: auth
    description: JWT情報
  - name: users
    description: ユーザ情報
  - name: arts
    description: アート情報
  - name: QR
    description: QR関連

paths:
  /auth/signin:
    post:
      tags:
        - auth
      summary: ユーザーログイン
      description: メールアドレスとパスワードを使用してユーザーをログインします。
      requestBody:
        $ref: "#/components/requestBodies/SignInRequestBody"
      responses:
        "201":
          $ref: "#/components/responses/SignInResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          description: ユーザが存在せずログインができない場合。
          $ref: "#/components/responses/UnauthorizedResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
  /auth/signup:
    post:
      tags:
        - auth
      summary: 会員登録
      description: リクエストBodyの内容を登録する
      requestBody:
        $ref: "#/components/requestBodies/SignUpRequestBody"
      responses:
        "201":
          $ref: "#/components/responses/SignUpResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "409":
          $ref: "#/components/responses/AlreadyEmailResponse"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
  /auth/signout:
    post:
      summary: 会員のログアウト
      description: JWTTokenを削除して会員をログアウトさせる。
      tags:
        - auth
      security:
        - Bearer: []
      responses:
        "201":
          $ref: "#/components/responses/SignOutResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"

  /users/{user_id}/email-change:
    # TODO: tokenテーブルにemailを保存。tokenが正しい場合に、emailを更新するため。
    post:
      summary: 新しいメールアドレス受け取る。
      description: 1.新しいメールアドレスを受け取る<br>
        2.メールアドレスが既に登録されていなければメールアドレス宛にtokenを付与したリンクを送る。

      tags:
        - users
      security:
        - Bearer: []
      parameters:
        - $ref: "#/components/parameters/user_id"
      requestBody:
        $ref: "#/components/requestBodies/EmailRequestBody"
      responses:
        "201":
          $ref: "#/components/responses/EmailTransmissionSuccessResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "409":
          $ref: "#/components/responses/AlreadyEmailResponse"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
  /users/{user_id}/email-change/verify:
    put:
      summary: メールアドレス変更
      description:
        1.tokenをチェックし一致していればメールアドレスを更新する。<br>
        - tokenが不正なら403を返す。
        - tokenが正常なら201を返す。
      tags:
        - users
      parameters:
        - $ref: "#/components/parameters/user_id"
      requestBody:
        $ref: "#/components/requestBodies/UserTokenRequestBody"
      responses:
        "201":
          $ref: "#/components/responses/SuccessResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
  /users/{user_id}/password-change:
    put:
      summary: パスワード変更
      description: 新しいパスワードに変更する。
      tags:
        - users
      security:
        - Bearer: []
      parameters:
        - $ref: "#/components/parameters/user_id"
      requestBody:
        $ref: "#/components/requestBodies/PasswordChangeRequestBody"
      responses:
        "201":
          $ref: "#/components/responses/SuccessResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
  /users/{user_id}/password-reset:
    post:
      summary: パスワードリセット
      description:
        1.メールアドレスを受け取り、存在すればメールアドレス宛にリンクを送信<br>
        - 存在しない場合は、401を返す。<br>
        2.リンクにアクセスし、パスポートのリセットを行う。
      tags:
        - users
      parameters:
        - $ref: "#/components/parameters/user_id"
      requestBody:
        $ref: "#/components/requestBodies/EmailRequestBody"
      responses:
        "201":
          $ref: "#/components/responses/SuccessResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"

  /users/{user_id}/password-reset/verify:
    put:
      summary: パスワードリセット
      description: 1.tokenを受け取り、正常ならpasswordを更新する。<br>
        2.不正な値なら403を返す。
      tags:
        - users
      parameters:
        - $ref: "#/components/parameters/user_id"
      requestBody:
        $ref: "#/components/requestBodies/PasswordResetRequestBody"
      responses:
        "201":
          $ref: "#/components/responses/SuccessResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
  /users/{user_id}/others-change:
    put:
      summary: 他情報変更
      description: 年齢、都道府県、性別の変更を行う。
      tags:
        - users
      security:
        - Bearer: []
      parameters:
        - $ref: "#/components/parameters/user_id"
      requestBody:
        $ref: "#/components/requestBodies/OthersChangeRequestBody"
      responses:
        "201":
          $ref: "#/components/responses/SuccessResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"

  /arts:
    get:
      summary: 作品を取得する。
      description: すべての作品を取得する。
      tags:
        - arts
      responses:
        "200":
          $ref: "#/components/responses/ArtsResponse"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
  /arts/{art_id}:
    get:
      summary: 作品の詳細情報を取得。
      description: art_idの作品のの詳細情報を取得する。
      tags:
        - arts
      parameters:
        - $ref: "#/components/parameters/art_id"
      responses:
        "200":
          $ref: "#/components/responses/ArtsDetailResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
  /arts/author:
    get:
      summary: 作者の作品を取得する。
      description: 作者の「あいうえお」順にして返す。
      tags:
        - arts
      responses:
        "200":
          $ref: "#/components/responses/ArtsResponse"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
  /arts/{user_id}/favorited:
    get:
      summary: ユーザがお気に入りした作品を取得する。
      description: ユーザIDを渡し、お気に入りした作品を返す。
      tags:
        - arts
      security:
        - Bearer: []
      parameters:
        - $ref: "#/components/parameters/user_id"
      responses:
        "200":
          $ref: "#/components/responses/ArtsResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
  /arts/{art_id}/favorite: # TODO: favorite機能のエンドポイント
    post:
      summary: ユーザが作品をお気に入りに登録する。
      description: ユーザIDとarts_idを渡し、作品をお気に入りする。
      tags:
        - arts
      security:
        - Bearer: []
      parameters:
        - $ref: "#/components/parameters/art_id"
      requestBody:
        $ref: "#/components/requestBodies/ArtUserIdSaveRequestBody"
      responses:
        "201":
          $ref: "#/components/responses/SuccessResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
  /arts/areas:
    get:
      summary: 作品のIDとエリアコードを返す。
      description: 作品のIDとエリアコードを返す。
      tags:
        - arts
      responses:
        "200":
          $ref: "#/components/responses/ArtsAreaResponse"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"

  /qr/{art_id}:
    # NOTE: user_idをNULL許容する形になってしまう。JWTトークンがないと401を返すため、エンドポイントを分ける。
    get:
      summary: QRを読み込み時
      description: QRを読み込み時にAR作品のオブジェクト格納URL等を返す。
      tags:
        - QR
      parameters:
        - $ref: "#/components/parameters/art_id"
      requestBody:
        $ref: "#/components/requestBodies/QRRequestBody"
      responses:
        "200":
          $ref: "#/components/responses/QRResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"

components:
  parameters:
    user_id:
      name: user_id
      in: path
      description: ユーザID
      required: true
      schema:
        type: string
        example: "hello world"
    art_id:
      name: art_id
      in: path
      description: アートID
      required: true
      schema:
        type: string
        example: "hello world"

  requestBodies:
    SignInRequestBody:
      description: signin user
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SignInModel"

    SignUpRequestBody:
      description: Signup user
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SignUpModel"

    ArtIdRequestBody:
      description: アートのIDを取得
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ArtIdModel"

    EmailRequestBody:
      description: email change
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/EmailModel"

    UserTokenRequestBody:
      description: user token
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserTokenModel"

    PasswordResetRequestBody:
      description: password reset
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PasswordResetModel"

    PasswordChangeRequestBody:
      description: password change
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PasswordModel"

    OthersChangeRequestBody:
      description: その他情報変更
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OthersChangeModel"

    ArtUserIdSaveRequestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ArtUserIdSaveModel"

    QRRequestBody:
      required: true
      content:
        application/json:
          schema:
            description: QR読み込み時にOSの名前を受け取る
            required:
              - os_name
            type: object
            properties:
              os_name:
                type: string
            additionalProperties: false

  schemas:
    SignInModel:
      description: SignIn Model
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      additionalProperties: false
    SignUpModel:
      description: SignUp Model
      required:
        - email
        - password
        - age_group
        - gender
        - prefecture
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        age_group:
          type: integer
        gender:
          type: integer
        prefecture:
          type: integer
      additionalProperties: false

    PasswordModel:
      description: password Model
      required:
        - password
      type: object
      properties:
        password:
          type: string
      additionalProperties: false
    EmailModel:
      description: email Model
      required:
        - email
      type: object
      properties:
        email:
          type: string
      additionalProperties: false
    UserTokenModel:
      description: user token Model
      required:
        - token
        - email
      type: object
      properties:
        token:
          type: string
        email:
          type: string
      additionalProperties: false

    PasswordResetModel:
      description: password reset model
      required:
        - token
        - password
      type: object
      properties:
        token:
          type: string
        password:
          type: string
      additionalProperties: false

    OthersChangeModel:
      description: other change Model
      required:
        - gender
        - age-group
        - prefectures
      type: object
      properties:
        gender:
          type: integer
        age-group:
          type: integer
        prefectures:
          type: integer
      additionalProperties: false

    ArtUserIdSaveModel:
      description: ユーザが作品を保存する
      required:
        - user_id
      type: object
      properties:
        user_id:
          type: string
      additionalProperties: false
    ArtsModel:
      description: Response Arts Model.
      type: object
      properties:
        arts.id:
          type: string
        arts.name:
          type: string
        arts.address:
          type: string
        arts.image_path:
          type: array
          items:
            type: string
        authors.name:
          type: string
        is_favorited:
          type: boolean
      additionalProperties: false
    ArtsAreaModel:
      description: Response Area Model
      type: object
      properties:
        area.code:
          type: string
        arts.id:
          type: string
        is_favorited:
          type: boolean
      additionalProperties: false
    ArtsDetailModel:
      description: Response Arts Detail Model.
      type: object
      properties:
        arts.id:
          type: string
        arts.name:
          type: string
        arts.address:
          type: string
        arts.image_path:
          type: array
          items:
            type: string
        arts.description:
          type: string
        arts.is_public:
          type: boolean
        arts.created_year:
          type: integer
          example: 2023 # NOTE: exampleを入力しないと０になるため。
        arts.datetime_description:
          type: string
        arts.closed_day_description:
          type: string
        institutions.admission_fee_description:
          type: string
        authors.name:
          type: string
        is_favorited:
          type: boolean
    ArtIdModel:
      description: art id Model
      required:
        - art_id
      type: object
      properties:
        arts_id:
          type: string
      additionalProperties: false
    QRModel:
      description: QR Model
      required:
        - arts_id
        - arts.name
        - arts.address
        - arts.image_path
        - object_path
        - authors.name
      type: object
      properties:
        arts.id:
          type: string
        arts.name:
          type: string
        arts.address:
          type: string
        arts.description:
          type: string
        arts.is_public:
          type: boolean
        arts.created_year:
          type: integer
          example: 2023 # NOTE: exampleを入力しないと０になるため。
        arts.datetime_description:
          type: string
        arts.closed_day_description:
          type: string
        institutions.admission_fee_description:
          type: string
        authors.name:
          type: string
        poster_path: # NOTE: S3からAPI経由で取得
          type: string
        glb_path: # NOTE: S3からAPI経由で取得
          type: string
        reality_path: # NOTE: S3からAPI経由で取得
          type: string
      additionalProperties: false
    QRUserIdModel:
      description: QR読み込み時にuserIDとOSの名前を受け取る
      required:
        - user_id
        - os_name
      type: object
      properties:
        user_id:
          type: string
        os_name:
          type: string
      additionalProperties: false
    SuccessModel:
      description: 成功
      required:
        - statusCode
        - message
      type: object
      properties:
        statusCode:
          title: statusCode
          type: integer
          example: 201
        message:
          title: message
          type: string
          example: 成功
    ErrorModel:
      description: Response Error Model.
      required:
        - statusCode
        - message
      type: object
      properties:
        statusCode:
          title: error code
          type: integer
        message:
          title: error message
          type: string
    DtoModel:
      {
        type: object,
        properties:
          { "property": { "type": "string" }, "message": { "type": "string" } },
      }

  responses:
    SignInResponse:
      description: ログイン成功
      content:
        application/json:
          schema:
            properties:
              access_token:
                type: string
                example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpAVCI9.eyJzdWIiOiIxMjM0NTY3ODkwIrwinFtZSI6KivaG4gRG9lIiwiYWRtaW4iOnRydWUsImlzcyI6Imh0dHA6Ly9zZXJ2aWNlLmNvbS9hdXRoL3YxLzAiLCJleHAiOjE2MzQ1Njc4OTgsImZpbGUiOnRydWUsImF1dGhoul0aWVzImpfXX0.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
              token_type:
                type: string
                example: Bearer
              expires_in:
                type: integer
                example: 3600
    SignUpResponse:
      description: User登録完了
      content:
        application/json:
          schema:
            properties:
              statusCode:
                example: 201
              message:
                example: created
    SignOutResponse:
      description: サインアウト完了
      content:
        application/json:
          schema:
            properties:
              statusCode:
                example: 201
              message:
                example: サインアウトしました。
    ArtsResponse:
      description: 作品情報を返す。
      content:
        application/json:
          schema:
            type: array
            items:
              allOf:
                - $ref: "#/components/schemas/ArtsModel"
    ArtsDetailResponse:
      description: 作品の詳細情報を返す。
      content:
        application/json:
          schema:
            type: array
            items:
              allOf:
                - $ref: "#/components/schemas/ArtsDetailModel"
    ArtsAreaResponse:
      description: 作品IDとエリアコードを返す。
      content:
        application/json:
          schema:
            type: array
            items:
              allOf:
                - $ref: "#/components/schemas/ArtsAreaModel"
    QRResponse:
      description: QRを読み込んだ際の情報を返す。
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/QRModel"
    SuccessResponse:
      description: 成功のレスポンス
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/SuccessModel"
    AlreadyEmailResponse:
      description: メールアドレスは既に登録されている場合
      content:
        application/json:
          schema:
            properties:
              statusCode:
                example: 409
              message:
                example: メールアドレスは既に登録されています。
    EmailTransmissionSuccessResponse:
      description: メールが正常に送られたレスポンス。
      content:
        application/json:
          schema:
            properties:
              statusCode:
                example: 201
              message:
                example: メールが正常に送られました。

    BadRequestResponse:
      description: Bad Request.
      content:
        application/json:
          schema:
            type: object
            properties:
              statusCode:
                type: integer
                example: 400
              message:
                type: array
                items:
                  $ref: "#/components/schemas/DtoModel"
    UnauthorizedResponse:
      description: Unauthorized.
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorModel"
            properties:
              statusCode:
                example: 401
    ForbiddenResponse:
      description: |
        Forbidden.
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorModel"
            properties:
              statusCode:
                example: 403
              message:
                example: Forbidden.
    NotFoundResponse:
      description: |
        Not Found.
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorModel"
            properties:
              statusCode:
                example: 404
              message:
                example: Not Found.
    InternalServerErrorResponse:
      description: サーバエラー
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorModel"
            properties:
              statusCode:
                example: 500
              message:
                example: internal server error

  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Credentials or access token for API
